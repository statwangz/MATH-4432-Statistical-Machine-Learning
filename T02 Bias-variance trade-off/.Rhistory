gc()
yhat
set.seed(123)
trial <- 500 # Number of experiment trials
n <- 20 # Number of samples for each trial
lambda_list <- exp(seq(log(1e-6), log(10), length.out = 100)) # Parameter list
biasSQ <- variance <- c(0, length(lambda_list)) # Bias and variance
X <- runif(n, 0, 1) # Predictor
y0 <- sin(2 * pi * X) # True values of y
yhat <- array(0, dim = c(length(lambda_list), n, trial)) # Predicted values\
y <- y0 + rnorm(n, mean = 0, sd = 1) # Add noise
i=1
j= 1
fit_ss <- smooth.spline(x = X, y = y, lambda = lambda_list[i])
yhat[i, , j] <- predict(fit_ss, X)$y
yhat
exp(log(lambda_list)[which.min(biasSQ + variance)])
exp(log(lambda_list)[which.min(biasSQ + variance)])
biasSQ + variance
biasSQ
log(lambda_list)[which.min(biasSQ + variance)]
knitr::opts_chunk$set(
collapse = TRUE,
results = "asis",
echo = TRUE,
comment = "#>",
out.width = "100%"
)
library(xaringanthemer)
ggplot(data = NULL) +
geom_line(aes(x = log(lambda_list), y = biasSQ, color = "biasSQ"), size = 2) +
geom_line(aes(x = log(lambda_list), y = variance, color = "variance"), size = 2) +
geom_line(aes(x = log(lambda_list), y = biasSQ + variance, color = "biasSQ + variance"), size = 2) +
geom_vline(xintercept = log(lambda_list)[which.min(biasSQ + variance)], size = 2) + # Minimal error
xlab("log(lambda)") +
ylab("Error") +
scale_color_manual(name = "Sources of error",
breaks = c("biasSQ", "variance", "biasSQ + variance"),
values = c("biasSQ" = "red", "variance" = "blue", "biasSQ + variance" = "green")) +
theme(
text = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.text.x = element_text(size = 18),
legend.title = element_text(size = 15),
legend.text = element_text(size = 15),
legend.position = "bottom"
)
knitr::opts_chunk$set(
collapse = TRUE,
results = "asis",
echo = TRUE,
comment = "#>",
out.width = "100%"
)
library(xaringanthemer)
style_mono_accent(
header_font_google = google_font("Josefin Slab", "600"),
text_font_google   = google_font("Work Sans", "300", "300i"),
code_font_google   = google_font("IBM Plex Mono")
)
style_mono_light(
base_color = "#003366",
link_color = "#996600",
text_bold_color = "#996600",
link_decoration = "underline"
)
library(ggplot2)
ggplot(data = NULL) +
geom_line(aes(x = log(lambda_list), y = biasSQ, color = "biasSQ"), size = 2) +
geom_line(aes(x = log(lambda_list), y = variance, color = "variance"), size = 2) +
geom_line(aes(x = log(lambda_list), y = biasSQ + variance, color = "biasSQ + variance"), size = 2) +
geom_vline(xintercept = log(lambda_list)[which.min(biasSQ + variance)], size = 2) + # Minimal error
xlab("log(lambda)") +
ylab("Error") +
scale_color_manual(name = "Sources of error",
breaks = c("biasSQ", "variance", "biasSQ + variance"),
values = c("biasSQ" = "red", "variance" = "blue", "biasSQ + variance" = "green")) +
theme(
text = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.text.x = element_text(size = 18),
legend.title = element_text(size = 15),
legend.text = element_text(size = 15),
legend.position = "bottom"
)
set.seed(123)
trial <- 500 # Number of experiment trials
n <- 20 # Number of samples for each trial
lambda_list <- exp(seq(log(1e-6), log(10), length.out = 100)) # Parameter list
biasSQ <- variance <- c(0, length(lambda_list)) # Bias and variance
X <- runif(n, 0, 1) # Predictor
y0 <- sin(2 * pi * X) # True values of y
for(i in 1 : length(lambda_list)){
yhat <- matrix(0, nrow = n, ncol = trial) # Predicted values
for(j in 1 : trial){
y <- y0 + rnorm(n, mean = 0, sd = 1) # Add noise
fit_ss <- smooth.spline(x = X, y = y, lambda = lambda_list[i]) # Smoothing spline regression
yhat[, j] <- predict(fit_ss, X)$y # Predicted values
}
y_bar <- rowMeans(yhat) # Mean of predicted values, E(f^hat)
biasSQ[i] <- mean((y0 - y_bar)^2)  # Bias square, E[ (f - E(f^hat))^2 ]
variance[i] <- mean((yhat - y_bar)^2)   # Variance, E[ (E(f^hat) - f^hat)^2 ]
}
log(lambda_list)[which.min(biasSQ + variance)]
exp(log(lambda_list)[which.min(biasSQ + variance)])
set.seed(123)
trial <- 500 # Number of experiment trials
n <- 20 # Number of samples for each trial
lambda_list <- exp(seq(log(1e-6), log(10), length.out = 100)) # Parameter list
model_list <- list() # Model list
biasSQ <- variance <- c(0, length(lambda_list)) # Bias and variance
X <- runif(n, 0, 1) # Predictor
y0 <- sin(2 * pi * X) # True values of y
for(i in 1 : length(lambda_list)){
model_list_i <- list()
yhat <- matrix(0, nrow = n, ncol = trial) # Predicted values
for(j in 1 : trial){
y <- y0 + rnorm(n, mean = 0, sd = 1) # Add noise
fit_ss <- smooth.spline(x = X, y = y, lambda = lambda_list[i]) # Smoothing spline regression
model_list_i <- c(model_list_i, list(fit_ss)) # Save the model
yhat[, j] <- predict(fit_ss, X)$y # Predicted values
}
model_list <- c(model_list, list(model_list_i))
y_bar <- rowMeans(yhat) # Mean of predicted values, E(f^hat)
biasSQ[i] <- mean((y0 - y_bar)^2)  # Bias square, E[ (f - E(f^hat))^2 ]
variance[i] <- mean((yhat - y_bar)^2)   # Variance, E[ (E(f^hat) - f^hat)^2 ]
}
par(mfrow=c(3, 2))
N <- 100
lambda_idx_list <- c(1, which.min(biasSQ + variance), 100)
x <- seq(0, 1, length.out = N)
y0 <- sin(2 * pi * x)
for(lambda_idx in lambda_idx_list){
plot(x, y0, col = "green", type = "l", ylim = c(-3, 3))
yhat <- matrix(0, nrow = N, ncol = 20)
for(j in 1 : 20){
yhat[, j] <- predict(model_list[[lambda_idx]][[j]], x)$y
lines(x, yhat[, j], col = "red")
}
plot(x, y0, col = "green", type = "l", ylim = c(-3, 3))
lines(x, rowMeans(yhat), col = "red", ylim = c(-3, 3))
}
which.min(biasSQ + variance)
lambda_list[which.min(biasSQ + variance)]
xaringan:::inf_mr()
c(0, length(lambda_list))
to_pdf(from = "Bias-variance trade-off.Rmd", complex_slides = TRUE)
renderthis::to_pdf(from = "Bias-variance trade-off.Rmd", complex_slides = TRUE)
renderthis::to_pdf(from = "Bias-variance trade-off.Rmd", complex_slides = TRUE, partial_slides = TRUE)
renderthis::to_pdf(from = "Bias-variance trade-off.Rmd", complex_slides = TRUE, partial_slides = TRUE)
